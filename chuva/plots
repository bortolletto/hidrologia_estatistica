#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Sep 19 20:45:48 2023

@author: felipe
"""


import pandas as pd
import matplotlib.pyplot as plt

vazao_d = pd.read_csv("./csvs/vazao.csv",index_col = 0 ,parse_dates = True).iloc[::-1]
vazao_d["ano_hidrologico"] = vazao_d.index.to_period('M').asfreq('A-FEB').astype(int)+ 1969


vazao_m= vazao_d.resample("M",label = "left",closed = "right").mean()

vazao_m["ano"] = vazao_m.index.year
vazao_m["ano_hidrologico"] = vazao_m.index.to_period('M').asfreq('A-FEB').astype(int)+ 1969

ano_hidrologico_ = pd.DataFrame(columns = vazao_m.index.year.unique())
ano_civil_       = pd.DataFrame(columns = vazao_m.index.year.unique())
    #%% box_plot media mensal por ano
def criar_boxplot_generico(dados, rótulos, título, salvar_caminho,anos_unicos):
    plt.figure(figsize=(10, 6))
    plt.boxplot(dados)

    ax = plt.gca()
    plt.xticks(rotation=270)
    rótulos_exibidos = anos_unicos[::2] 
    posicoes_exibidas = [anos_unicos.index(ano) + 1 for ano in rótulos_exibidos]
    

    ax.set_xticks(posicoes_exibidas)
    ax.set_xticklabels(rótulos_exibidos)

    plt.ylabel('Vazão Média Mensal')
    plt.title(título)

    # Salvar a imagem com boa resolução
    plt.savefig(salvar_caminho, dpi=300, bbox_inches='tight')

    # Mostrar o gráfico (opcional)
    plt.show()

# Exemplo de uso
anos_unicos = sorted(set(vazao_m['ano_hidrologico']))
dados = [group['vazao'] for _, group in vazao_m.groupby('ano_hidrologico')]
rótulos = sorted(set(vazao_m['ano_hidrologico']))
título = 'Gráfico de Boxplot da Vazão Média Mensal por Ano Hidrológico'
caminho_salvar = '../imagens/box_plot_media_mensal.png'

criar_boxplot_generico(dados, rótulos, título, caminho_salvar,anos_unicos)
#%%
meses = {
    1: 'Janeiro',
    2: 'Fevereiro',
    3: 'Março',
    4: 'Abril',
    5: 'Maio',
    6: 'Junho',
    7: 'Julho',
    8: 'Agosto',
    9: 'Setembro',
    10: 'Outubro',
    11: 'Novembro',
    12: 'Dezembro'
}


vazao_d["dia"] = vazao_d.index.day
vazao_d["mes"] = vazao_d.index.month
dados = vazao_d.copy()

plt.figure(figsize=(12, 8))

# dados = [group['vazao'] for _, group in vazao_d.groupby(['mes',"dia"])]
for mes in dados.index.month.unique():
    plt.figure(figsize=(10, 6))
    valores_mes = []
    # plt.subplot(3, 4, mes)
    lista = []
    for dia in dados.index.day.unique():
        temp = dados.loc[(dados.mes == mes) & (dados.dia == dia),"vazao"]    
        lista.append(temp)
    plt.boxplot(lista)
    plt.title(f'Mês {meses[mes]}')
    plt.ylabel(f'Vazão Diaria do mês de {meses[mes]}')
    plt.xlabel('Dias do Mês')

    
    plt.savefig(f"../imagens/box_plot_diario_{meses[mes]}.png", dpi=300, bbox_inches='tight')
#%% vazao media anual:

vazao_y = vazao_d.resample("Y",label = "right",closed = "left").mean()
vazao_y["ano"] =vazao_y.index.year
dados = vazao_y["vazao"]
    
# Histograma:
        
    
import math

def sturges_rule(data):
    """
    Calcula o número de bins usando a regra de Sturges.

    Args:
        data (list): Uma lista de valores.

    Returns:
        int: O número de bins calculado de acordo com a regra de Sturges.
    """
    num_bins = 1 + int(math.log2(len(data)))
    return num_bins


plt.hist(dados, bins=sturges_rule(dados), color='blue', alpha=0.7)  # "bins" define o número de intervalos no histograma

# Personalizar o gráfico
plt.title('Frquencias de ocorrencias da médida anual')
plt.xlabel('M³/s')
plt.ylabel('Frequência')
plt.grid(True)

# Mostrar o gráfico
# ()
plt.savefig("../imagens/histograma_médio_anual.png", dpi=300, bbox_inches='tight')
#%% exercicio 7: Não conseguimos plotar o box_plot, rever o codigo dps
vazao_y.drop(columns = ['ano_hidrologico', 'dia', 'mes', 'ano'],inplace = True)
vazao_y.vazao.to_frame()
plt.figure(figsize=(8, 6))
plt.boxplot(vazao_y.vazao, vert=True)

plt.title('Box-Plot das Vazões Médias Anuais')
plt.xlabel('Vazões Médias Anuais')
plt.grid(True)
plt.show()
#%% 8) Construa uma curva de permanência das vazões com toda a série de dados (na escala diária).

df = vazao_d.copy() 
valores_ordenados = df.vazao.sort_values().to_frame()
n = len(valores_ordenados)
valores_ordenados["p"] = [(n-i+1)/(n+1) for i in range(n)]
valores_ordenados["p-1"] = 1 - valores_ordenados["p"]


plt.figure(figsize=(12, 8))

plt.plot(valores_ordenados["vazao"], valores_ordenados["p"], linestyle='-', color='b')

# Personaliza o gráfico
plt.title('Curva de Permanência')
plt.xlabel('Vazões')
plt.ylabel('Probabilidade de Permanência')
plt.grid(True)
# ()

plt.savefig("../imagens/curva_permanencia_dados_diarios(8).png", dpi=300, bbox_inches='tight')

#%% 9) Construa uma curva de permanência das vazões médias mensais e compare com a anterior. Discuta as diferenças.



df = vazao_m.copy() 
valores_ordenados = df.vazao.sort_values().to_frame()
n = len(valores_ordenados)
valores_ordenados["p"] = [(n-i+1)/(n+1) for i in range(n)]
valores_ordenados["p-1"] = 1 - valores_ordenados["p"]


plt.figure(figsize=(12, 8))

plt.plot(valores_ordenados["vazao"], valores_ordenados["p"], linestyle='-', color='b')

# Personaliza o gráfico
plt.title('Curva de Permanência')
plt.xlabel('Vazões')
plt.ylabel('Probabilidade de Permanência')
plt.grid(True)
# ()

plt.savefig("../imagens/curva_permanencia_medias_mensais(9).png", dpi=300, bbox_inches='tight')

#%% 10) Construa uma curva de permanência para cada ano, apresente em gráficos sobrepostos e compare com a curva
#       construída com a série completa. Discuta as observações.

df = vazao_d.copy()
# Suponha que você já tenha seu DataFrame 'df' com os dados de vazão e 'vazao_d' seja o DataFrame de dados

# Determine os anos únicos em seus dados
anos_unicos = vazao_d.index.year.unique()

# Divida os anos em quatro grupos (cada grupo conterá 1/4 dos anos)
grupos_de_anos = [
    anos_unicos[:len(anos_unicos)//4],
    anos_unicos[len(anos_unicos)//4:2*len(anos_unicos)//4],
    anos_unicos[2*len(anos_unicos)//4:3*len(anos_unicos)//4],
    anos_unicos[3*len(anos_unicos)//4:]
]

# Crie um gráfico para cada grupo de anos
fig, axs = plt.subplots(2, 2, figsize=(12, 8))

for i, anos in enumerate(grupos_de_anos):
    ax = axs[i//2, i%2]
    ax.set_title(f'Gráfico {i+1}')
    
    for ano in anos:
        temp = df.loc[f"{ano}"]
        valores_ordenados = temp.vazao.sort_values().to_frame()
        n = len(valores_ordenados)
        valores_ordenados["p"] = [(n-i+1)/(n+1) for i in range(n)]
        valores_ordenados["p-1"] = 1 - valores_ordenados["p"]
        
        ax.plot(valores_ordenados["vazao"], valores_ordenados["p"], linestyle='-', label=ano)
    
    ax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.05),
          ncol=3, fancybox=True, shadow=True)
    ax.set_xlabel('Vazões')
    ax.set_ylabel('Probabilidade de Permanência')
    ax.grid(True)

# Ajuste o layout dos gráficos
plt.tight_layout()

# Mostrar os gráficos
# ()

plt.savefig("../imagens/curva_permanencia_diaria_ano_a_ano(10).png", dpi=300, bbox_inches='tight')

#%% 11) O que acontece na curva de permanência quando um mesmo valor na série se repete? Discuta.

#utilizando de temp do exemplo anterior:
temp.loc["2019-04":"2019-08"] = 1

valores_ordenados = temp.vazao.sort_values().to_frame()
n = len(valores_ordenados)
valores_ordenados["p"] = [(n-i+1)/(n+1) for i in range(n)]
valores_ordenados["p-1"] = 1 - valores_ordenados["p"]


plt.figure(figsize=(12, 8))

plt.plot(valores_ordenados["vazao"], valores_ordenados["p"], linestyle='-', color='b')

# Personaliza o gráfico
plt.title('Curva de Permanência')
plt.xlabel('Vazões')
plt.ylabel('Probabilidade de Permanência')
plt.grid(True)

plt.savefig("../imagens/comparaca_dadosrepetidos1(11).png", dpi=300, bbox_inches='tight')

# Como podemos ver no grafico, a curva acaba tendo uma "queda" ou o equivalente a um degrau, mesmos valores de vazão passam a possuir valores
# distoantes de probabilidade oque gera esse efeito ao grafico. 
# veremos a difença quando droparmos os dados duplicados:
    
test = temp.drop_duplicates()
valores_ordenados = test.vazao.sort_values().to_frame()
n = len(valores_ordenados)
valores_ordenados["p"] = [(n-i+1)/(n+1) for i in range(n)]
valores_ordenados["p-1"] = 1 - valores_ordenados["p"]


plt.figure(figsize=(12, 8))

plt.plot(valores_ordenados["vazao"], valores_ordenados["p"], linestyle='-', color='b')

# Personaliza o gráfico
plt.title('Curva de Permanência')
plt.xlabel('Vazões')
plt.ylabel('Probabilidade de Permanência')
plt.grid(True)

# agora oque vemos é um salto na vazão dos dados, visto que os dados duplicados foram retirados e novas probabilidades forama atribuidas. 

plt.savefig("../imagens/comparaca_dadosrepetidos2(11).png", dpi=300, bbox_inches='tight')
#%% 11 vazoes maximas mpedias anuais, solução da questão.

vazoes_maximas = vazao_d.groupby("ano_hidrologico").max()
v1 = vazoes_maximas.iloc[:20,]
v2 = vazoes_maximas.iloc[20:40]
v3 = vazoes_maximas.iloc[40:60]
v4 = vazoes_maximas.iloc[60:]


vazoes_maximas.mean()
v1.mean()
v2.mean()
v3.mean()
v4.mean()

# Todas são boas estimativas do que seria a vzão média anual, os dados oscilam entre uma faixa de valores de acordo com os anos de cada dataset
# A serie que contem todos os valores de dados, é a serie mais significativa e que se pode ter maior segunrança sobre seus valores, visto que 
# o conjunto da amostra utilizada é muito maior que os demais e consequentemente mais perto do que seria a média populacional.
# Vemos que o conjunto de 20 anos de v3(datas) possui as maiores vazoes do conjunto total de amostras, alem disso o conjunto v2 possui os menores
# valores de vazão . 
#%% 13 Diagrama Q-Q, esse diagrama é a curva de probabilidade plotada junto com a curva de probabilidade de vazão. 

chuva = pd.read_csv("./csvs/chuva_25334953_Porto Amazonas.csv",index_col = 0 ,parse_dates = True)
chuva = chuva.loc[chuva.horqualidade == 0]
chuva.drop(columns = ["horqualidade"],inplace = True)
chuva_d = chuva.resample('D',label = "left",closed = "left").sum()

def cp (df,coluna = "vazao"):
    valores_ordenados = df[coluna].sort_values().to_frame()
    valores_ordenados = valores_ordenados.dropna()
    n = len(valores_ordenados)
    valores_ordenados["p"] = [(n-i+1)/(n+1) for i in range(n)]
    valores_ordenados["p-1"] = 1 - valores_ordenados["p"]
    return valores_ordenados


chuva_cp = cp(chuva,"horleitura")
vazao_cp = cp(vazao_d)

fig, ax1 = plt.subplots(figsize=(8, 6))

# Configurar o primeiro eixo y (vazão)
ax1.set_xlabel('Probabilidade')
ax1.set_ylabel('Chuva', color='blue')
ax1.scatter(chuva_cp.p, chuva_cp.horleitura, color='blue', label='Vazão')
ax1.tick_params(axis='y', labelcolor='blue')

# Criar um segundo eixo y (precipitação)
ax2 = ax1.twinx()
ax2.set_ylabel('Vazao', color='red')
ax2.scatter(vazao_cp.p, vazao_cp.vazao, color='red', label='Precipitação')
ax2.tick_params(axis='y', labelcolor='red')

# Título e legenda
plt.title('Gráfico de Dispersão com Eixos Distintos para Vazão e Precipitação')
fig.tight_layout()

# Exibir o gráfico
# ()


plt.savefig("../imagens/grafico Q-Q(13).png", dpi=300, bbox_inches='tight')

#%%14 distribuiçoes das vazoes medias anuais

from scipy.stats import norm, lognorm, gamma,expon,beta
import numpy as np

dados = vazao_d.groupby("ano_hidrologico").mean()
dados = dados["vazao"]
dados = dados.sort_values()

# Plot a empírica
ecdf = cp(dados.to_frame())

# Ajustar as distribuições
parametros_norm = norm.fit(dados)
parametros_beta = beta.fit(dados)  
parametros_gamma = gamma.fit(dados)
parametros_exponencial = expon.fit(dados)


# Plot da função de densidade de probabilidade das distribuições ajustadas
x = dados

pdf_norm = norm.pdf(x, *parametros_norm)
pdf_beta = beta.pdf(x, *parametros_beta)  # Distribuição beta
pdf_gamma = gamma.pdf(x, *parametros_gamma)
pdf_exponencial = expon.pdf(x, *parametros_exponencial)

cdf_norm = norm.cdf(x, *parametros_norm)
cdf_beta = beta.cdf(x, *parametros_beta)  # Distribuição beta
cdf_gamma = gamma.cdf(x, *parametros_gamma)
cdf_exponencial = expon.cdf(x, *parametros_exponencial)


fig, ax1 = plt.subplots(figsize=(8, 6))

# Plot do histograma dos dados
ax1.hist(dados, bins=20, density=True, alpha=0.5, color='b', label='Histograma')

ax1.plot(x, pdf_norm, 'r-', label='Normal')
ax1.plot(x, pdf_beta, 'c-', label='Beta')  # Distribuição beta
ax1.plot(x, pdf_gamma, 'y-', label='Gama')
ax1.plot(x, pdf_exponencial, 'm-', label='Exponencial')
    
ax1.set_xlabel('Vazões Médias Anuais')
ax1.set_ylabel('Densidade de Probabilidade')
ax1.legend(loc='upper left')

# Cria um segundo eixo vertical
ax2 = ax1.twinx()

# Plota dados no segundo eixo vertical (substitua com seus próprios dados)

ax2.plot(x, cdf_norm, 'r-', label='Normal acum')
ax2.plot(x, cdf_beta, 'c-', label='Beta acum')  # Distribuição beta
ax2.plot(x, cdf_gamma, 'y-', label='Gama acum')
ax2.plot(x, cdf_exponencial, 'm-', label='Exponencial acum')
    
ax2.set_ylabel('CDF')
ax2.legend(loc='upper right')

# Exibe o gráfico
()
plt.savefig("../imagens/14_2 distribuiçoes das vazoes medias anuais.png", dpi=300, bbox_inches='tight')


#%%
fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))
fig.subplots_adjust(hspace=0.4)

# Distribuição Normal
ax1 = axes[0,0]
ax1.hist(dados, bins=20, density=True, alpha=0.5, color='b', label='Histograma')
ax1.plot(x, pdf_norm, 'r-', label='Normal')
ax1.set_xlabel('Vazões Médias Anuais')
ax1.set_ylabel('Densidade de Probabilidade')
ax1.set_title('Distribuição Normal')

ax2 = ax1.twinx()
ax2.plot(x, cdf_norm, 'g--', label='Normal acumulada')
lines1, labels1 = ax1.get_legend_handles_labels()
lines2, labels2 = ax2.get_legend_handles_labels()

ax1.legend(lines1 + lines2, labels1 + labels2, loc='center right')
# Repita o processo para os outros subplots
ax3 = axes[0, 1]
ax3.hist(dados, bins=20, density=True, alpha=0.5, color='b', label='Histograma')
ax3.plot(x, pdf_beta, 'g-', label='Log-Normal')
ax3.set_xlabel('Vazões Médias Anuais')
ax3.set_ylabel('Densidade de Probabilidade')
ax3.legend()
ax3.set_title('Distribuição Beta')

ax4 = ax3.twinx()
ax4.plot(x, cdf_beta, 'c--', label='Beta acumulada')

lines1, labels1 = ax3.get_legend_handles_labels()
lines2, labels2 = ax4.get_legend_handles_labels()

ax3.legend(lines1 + lines2, labels1 + labels2, loc='center right')

ax5 = axes[1, 0]
ax5.hist(dados, bins=20, density=True, alpha=0.5, color='b', label='Histograma')
ax5.plot(x, pdf_gamma, 'y-', label='Gama')
ax5.set_xlabel('Vazões Médias Anuais')
ax5.set_ylabel('Densidade de Probabilidade')
ax5.legend()
ax5.set_title('Distribuição Gama')

ax6 = ax5.twinx()
ax6.plot(x, cdf_gamma, 'k--', label='Gama Acumulada')
lines1, labels1 = ax5.get_legend_handles_labels()
lines2, labels2 = ax6.get_legend_handles_labels()
ax5.legend(lines1 + lines2, labels1 + labels2, loc='center right')

ax7 = axes[1, 1]
ax7.hist(dados, bins=20, density=True, alpha=0.5, color='b', label='Histograma')
ax7.plot(x, pdf_exponencial, 'm-', label='Exponencial')
ax7.set_xlabel('Vazões Médias Anuais')
ax7.set_ylabel('Densidade de Probabilidade')
ax7.set_title('Distribuição Exponencial')

ax8 = ax7.twinx()
ax8.plot(x, cdf_exponencial, 'r--', label='Exponencial Acumulada')
lines1, labels1 = ax7.get_legend_handles_labels()
lines2, labels2 = ax8.get_legend_handles_labels()

ax8.legend(lines1 + lines2, labels1 + labels2, loc='center right')


()
plt.savefig("../imagens/14 distribuiçoes das vazoes medias anuais.png", dpi=300, bbox_inches='tight')


#%%
#testes de aderencia

from scipy.stats import kstest, chisquare


#%% 15 distribuiçoes das vazoes maximas anuais

from scipy.stats import norm, lognorm, gamma,expon,beta
import numpy as np

dados = vazao_d.groupby("ano_hidrologico").max()
dados = dados["vazao"]
dados = dados.sort_values()

# Plot a empírica
ecdf = cp(dados.to_frame())

# Ajustar as distribuições
parametros_norm = norm.fit(dados)
parametros_beta = beta.fit(dados)  
parametros_gamma = gamma.fit(dados)
parametros_exponencial = expon.fit(dados)


# Plot da função de densidade de probabilidade das distribuições ajustadas
x = dados

pdf_norm = norm.pdf(x, *parametros_norm)
pdf_beta = beta.pdf(x, *parametros_beta)  # Distribuição beta
pdf_gamma = gamma.pdf(x, *parametros_gamma)
pdf_exponencial = expon.pdf(x, *parametros_exponencial)

cdf_norm = norm.cdf(x, *parametros_norm)
cdf_beta = beta.cdf(x, *parametros_beta)  # Distribuição beta
cdf_gamma = gamma.cdf(x, *parametros_gamma)
cdf_exponencial = expon.cdf(x, *parametros_exponencial)


fig, ax1 = plt.subplots(figsize=(8, 6))

# Plot do histograma dos dados
ax1.hist(dados, bins=20, density=True, alpha=0.5, color='b', label='Histograma')

ax1.plot(x, pdf_norm, 'r-', label='Normal')
ax1.plot(x, pdf_beta, 'c-', label='Beta')  # Distribuição beta
ax1.plot(x, pdf_gamma, 'y-', label='Gama')
ax1.plot(x, pdf_exponencial, 'm-', label='Exponencial')
    
ax1.set_xlabel('Vazões Médias Anuais')
ax1.set_ylabel('Densidade de Probabilidade')
ax1.legend(loc='upper left')

# Cria um segundo eixo vertical
ax2 = ax1.twinx()

# Plota dados no segundo eixo vertical (substitua com seus próprios dados)

ax2.plot(x, cdf_norm, 'r-', label='Normal acum')
ax2.plot(x, cdf_beta, 'c-', label='Beta acum')  # Distribuição beta
ax2.plot(x, cdf_gamma, 'y-', label='Gama acum')
ax2.plot(x, cdf_exponencial, 'm-', label='Exponencial acum')
    
ax2.set_ylabel('CDF')
ax2.legend(loc='upper right')

# Exibe o gráfico

plt.savefig("../imagens/15_2 distribuiçoes das vazoes maximas anuais.png", dpi=300, bbox_inches='tight')


fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))
fig.subplots_adjust(hspace=0.4)

# Distribuição Normal
ax1 = axes[0,0]
ax1.hist(dados, bins=20, density=True, alpha=0.5, color='b', label='Histograma')
ax1.plot(x, pdf_norm, 'r-', label='Normal')
ax1.set_xlabel('Vazões Médias Anuais')
ax1.set_ylabel('Densidade de Probabilidade')
ax1.set_title('Distribuição Normal')

ax2 = ax1.twinx()
ax2.plot(x, cdf_norm, 'g--', label='Normal acumulada')
lines1, labels1 = ax1.get_legend_handles_labels()
lines2, labels2 = ax2.get_legend_handles_labels()

ax1.legend(lines1 + lines2, labels1 + labels2, loc='center right')
# Repita o processo para os outros subplots
ax3 = axes[0, 1]
ax3.hist(dados, bins=20, density=True, alpha=0.5, color='b', label='Histograma')
ax3.plot(x, pdf_beta, 'g-', label='Log-Normal')
ax3.set_xlabel('Vazões Médias Anuais')
ax3.set_ylabel('Densidade de Probabilidade')
ax3.legend()
ax3.set_title('Distribuição Beta')

ax4 = ax3.twinx()
ax4.plot(x, cdf_beta, 'c--', label='Beta acumulada')

lines1, labels1 = ax3.get_legend_handles_labels()
lines2, labels2 = ax4.get_legend_handles_labels()

ax3.legend(lines1 + lines2, labels1 + labels2, loc='center right')

ax5 = axes[1, 0]
ax5.hist(dados, bins=20, density=True, alpha=0.5, color='b', label='Histograma')
ax5.plot(x, pdf_gamma, 'y-', label='Gama')
ax5.set_xlabel('Vazões Médias Anuais')
ax5.set_ylabel('Densidade de Probabilidade')
ax5.legend()
ax5.set_title('Distribuição Gama')

ax6 = ax5.twinx()
ax6.plot(x, cdf_gamma, 'k--', label='Gama Acumulada')
lines1, labels1 = ax5.get_legend_handles_labels()
lines2, labels2 = ax6.get_legend_handles_labels()
ax5.legend(lines1 + lines2, labels1 + labels2, loc='center right')

ax7 = axes[1, 1]
ax7.hist(dados, bins=20, density=True, alpha=0.5, color='b', label='Histograma')
ax7.plot(x, pdf_exponencial, 'm-', label='Exponencial')
ax7.set_xlabel('Vazões Médias Anuais')
ax7.set_ylabel('Densidade de Probabilidade')
ax7.set_title('Distribuição Exponencial')

ax8 = ax7.twinx()
ax8.plot(x, cdf_exponencial, 'r--', label='Exponencial Acumulada')
lines1, labels1 = ax7.get_legend_handles_labels()
lines2, labels2 = ax8.get_legend_handles_labels()

ax8.legend(lines1 + lines2, labels1 + labels2, loc='center right')



plt.savefig("../imagens/15 distribuiçoes das vazoes maximas anuais.png", dpi=300, bbox_inches='tight')



#testes de aderencia


#%% 16 vazoes minimas de 7 dias consecutivos

from scipy.stats import norm, lognorm, gamma,expon,beta
import numpy as np

dados = vazao_d['vazao'].rolling(window=7).mean().to_frame()
dados ["ano_hidrologico"] = dados .index.to_period('M').asfreq('A-FEB').astype(int)+ 1969
dados = vazao_d.groupby("ano_hidrologico").min()
dados = dados["vazao"]
dados = dados.sort_values()

# Plot a empírica
ecdf = cp(dados.to_frame())

# Ajustar as distribuições
parametros_norm = norm.fit(dados)
parametros_beta = beta.fit(dados)  
parametros_gamma = gamma.fit(dados)
parametros_exponencial = expon.fit(dados)


# Plot da função de densidade de probabilidade das distribuições ajustadas
x = dados

pdf_norm = norm.pdf(x, *parametros_norm)
pdf_beta = beta.pdf(x, *parametros_beta)  # Distribuição beta
pdf_gamma = gamma.pdf(x, *parametros_gamma)
pdf_exponencial = expon.pdf(x, *parametros_exponencial)

cdf_norm = norm.cdf(x, *parametros_norm)
cdf_beta = beta.cdf(x, *parametros_beta)  # Distribuição beta
cdf_gamma = gamma.cdf(x, *parametros_gamma)
cdf_exponencial = expon.cdf(x, *parametros_exponencial)



fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12, 8))
fig.subplots_adjust(hspace=0.4)

# Distribuição Normal
ax1 = axes[0,0]
ax1.hist(dados, bins=20, density=True, alpha=0.5, color='b', label='Histograma')
ax1.plot(x, pdf_norm, 'r-', label='Normal')
ax1.set_xlabel('Vazões Médias Anuais')
ax1.set_ylabel('Densidade de Probabilidade')
ax1.set_title('Distribuição Normal')

ax2 = ax1.twinx()
ax2.plot(x, cdf_norm, 'g--', label='Normal acumulada')
lines1, labels1 = ax1.get_legend_handles_labels()
lines2, labels2 = ax2.get_legend_handles_labels()

ax1.legend(lines1 + lines2, labels1 + labels2, loc='center right')
# Repita o processo para os outros subplots
ax3 = axes[0, 1]
ax3.hist(dados, bins=20, density=True, alpha=0.5, color='b', label='Histograma')
ax3.plot(x, pdf_beta, 'g-', label='Log-Normal')
ax3.set_xlabel('Vazões Médias Anuais')
ax3.set_ylabel('Densidade de Probabilidade')
ax3.legend()
ax3.set_title('Distribuição Beta')

ax4 = ax3.twinx()
ax4.plot(x, cdf_beta, 'c--', label='Beta acumulada')

lines1, labels1 = ax3.get_legend_handles_labels()
lines2, labels2 = ax4.get_legend_handles_labels()

ax3.legend(lines1 + lines2, labels1 + labels2, loc='center right')

ax5 = axes[1, 0]
ax5.hist(dados, bins=20, density=True, alpha=0.5, color='b', label='Histograma')
ax5.plot(x, pdf_gamma, 'y-', label='Gama')
ax5.set_xlabel('Vazões Médias Anuais')
ax5.set_ylabel('Densidade de Probabilidade')
ax5.legend()
ax5.set_title('Distribuição Gama')

ax6 = ax5.twinx()
ax6.plot(x, cdf_gamma, 'k--', label='Gama Acumulada')
lines1, labels1 = ax5.get_legend_handles_labels()
lines2, labels2 = ax6.get_legend_handles_labels()
ax5.legend(lines1 + lines2, labels1 + labels2, loc='center right')

ax7 = axes[1, 1]
ax7.hist(dados, bins=20, density=True, alpha=0.5, color='b', label='Histograma')
ax7.plot(x, pdf_exponencial, 'm-', label='Exponencial')
ax7.set_xlabel('Vazões Médias Anuais')
ax7.set_ylabel('Densidade de Probabilidade')
ax7.set_title('Distribuição Exponencial')

ax8 = ax7.twinx()
ax8.plot(x, cdf_exponencial, 'r--', label='Exponencial Acumulada')
lines1, labels1 = ax7.get_legend_handles_labels()
lines2, labels2 = ax8.get_legend_handles_labels()

ax8.legend(lines1 + lines2, labels1 + labels2, loc='center right')



plt.savefig("../imagens/16 distribuiçoes das vazoes minimas medias de 7 dias anuais.png", dpi=300, bbox_inches='tight')


